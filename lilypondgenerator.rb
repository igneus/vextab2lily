class LilyPondGenerator
  
  def generate(staves, output=STDOUT)
    @output = output
    
    @output.puts "\\version \"2.14.2\""
    @output.puts
    @output.puts "% This file was generated by vextab2lily"
    @output.puts "% (See http://github.com/igneus/vextab2lily )"
    @output.puts
    
    @stave_name = 'Stave'
    
    staves.each do |s|
      @stave_name += "E"
      create_pitches s
      if s.config['notation'] == 'true' && s.config['tablature'] == 'true' then
        create_notation_and_tablature s
      else
        if s.config['notation'] == 'true' then
          create_notation s
        elsif s.config['tablature'] == 'true' then
          create_tablature s
        else
          STDERR.puts "Warning: no notation or tablature Staff! No output!"
        end
      end
    end
  end
  
  # mapping of VexTab octaves to LilyPond octaves
  Cs = [1 => "c,,", 2 => "c,", 3 => "c", 4 => "c'", 5 => "c''"]
  
  def create_pitches(stave)
    @output.puts "pitches#{@stave_name} = {"
    
    case stave.config["time"]
    when nil
      @output.puts "\\cadenzaOn"
      @output.puts "\\override Score.TimeSignature #'stencil = ##f"
    when "C"
      @output.puts "\\time 4/4"
    when "C|"
      @output.puts "\\time 2/2"
    when /[0-9]+\/[0-9]+/
      @output.puts "\\time " + stave.config["time"]
    else
      "Generator Error: unknown time '#{stave.config["time"]}'"
    end
    
    key = stave.config["key"]
    t = key[0].downcase
    if key[1] == "b"
      t += "es"
    elsif key[1] == "#"
      t+= "is"
    end
    
    if (key.size == 3 && key[2] == "m") || (key.size == 2 && key[1] == "m") then
      v = "\\minor"
    else
      v = "\\major"
    end
    
    @output.puts "\\key #{t} #{v}"
    
    stave.music.each {|m|
      if m == :bar then
        @output.puts "|"
      elsif m.is_a?(Note) then
        pitch = m.pitch(stave.tuning)
        @output.puts "#{pitch[0]}\\#{m.string}"
      end
    }
    
    @output.puts "}"
  end
  
  def create_notation_and_tablature(stave)
    @output.puts "\\score {"
    @output.puts "<<"
    create_notation(stave)
    create_tablature(stave)
    @output.puts ">>"
    @output.puts "}"
  end
  
  def create_notation(stave)
    octave = stave.music.first.octave(stave.tuning)
    if octave < 1 || octave >= Cs.size then
      "Generator Error: octave '#{octave}' unknown."
    end
    p octave
    
    if Tuning::NOTES.index(stave.music.first.pitch(stave.tuning)[0]) <= 3 then
      c = Cs[octave]
    else
      c = Cs[octave + 1]
    end
    
    @output.puts "\\new Staff \\relative #{c} {"
    @output.puts "\\clef #{stave.config["clef"]}"
    @output.puts "\\pitches#{@stave_name}"
    @output.puts "}"
  end
  
  def create_tablature(stave)
    @output.puts "\\new TabStaff \\relative c' {"
    @output.puts "\\pitches#{@stave_name}"      
    @output.puts "}"
  end
  
end