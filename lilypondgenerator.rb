require './lilypondoutputformatter.rb'

class LilyPondGenerator
  
  def generate(staves, output=STDOUT)
    @output = LilyPondOutputFormatter.new output
    
    @output.puts "\\version \"2.14.2\""
    @output.puts
    @output.puts "% This file was generated by vextab2lily"
    @output.puts "% (See http://github.com/igneus/vextab2lily )"
    @output.puts
    
    @stave_name = 'Stave'
    
    staves.each do |s|
      @stave_name += "E" # automatic unique stave names - a bit stupid sounding...
      create_pitches s
      if s.config['notation'] == 'true' && s.config['tablature'] == 'true' then
        create_notation_and_tablature s
      elsif s.config['notation'] == 'true' then
        create_notation s
      elsif s.config['tablature'] == 'true' then
        create_tablature s
      else
        STDERR.puts "Warning: no notation or tablature Staff! No output!"
      end
    end
  end
  
  def print_note(note, stave, last_note_pitch)
    pitch = note.pitch(stave.tuning)
    numpitch = note.numeric_pitch(stave.tuning)
    if (numpitch - last_note_pitch) > Tuning::OCTAVE_STEPS / 2 then
      steps = ((numpitch - last_note_pitch).abs / Tuning::OCTAVE_STEPS)
      steps = 1 if steps < 1
      octave_modifier = "'" * steps
    elsif (numpitch - last_note_pitch) < - (Tuning::OCTAVE_STEPS / 2) then
      steps = ((numpitch - last_note_pitch).abs / Tuning::OCTAVE_STEPS)
      steps = 1 if steps < 1
      octave_modifier = "," * steps
      puts numpitch, last_note_pitch
      p pitch
    else
      octave_modifier = ""
    end
    @output.print "#{pitch[0]}#{octave_modifier}\\#{note.string} "
  end
  
  # mapping of VexTab octaves to LilyPond octaves
  # Cs = ["c,,,", "c,,", "c,", "c", "c'", "c''"]
  Cs = ["c,,,,", "c,,,", "c,,", "c,", "c", "c'", "c''", "c'''", "c''''"]
  
  def create_pitches(stave)
    octave = stave.music.first.octave(stave.tuning)
    
    c = nil
    if Tuning::NOTES.index(stave.music.first.pitch(stave.tuning)[0]) > Tuning::OCTAVE_STEPS/2 then
      octave += 1
    end
    if Cs[octave].nil?
      raise "Generator Error: octave '#{octave}' unknown."
    end
    c = Cs[octave]
    @output.puts "pitches#{@stave_name} = \\relative #{c} {"
    
    case stave.config["time"]
    when nil
      @output.puts "\\cadenzaOn"
      @output.puts "\\override Score.TimeSignature #'stencil = ##f"
    when "C"
      @output.puts "\\time 4/4"
    when "C|"
      @output.puts "\\time 2/2"
    when /[0-9]+\/[0-9]+/
      @output.puts "\\time " + stave.config["time"]
    else
      "Generator Error: unknown time '#{stave.config["time"]}'"
    end
    
    key = stave.config["key"]
    t = key[0].downcase
    if key[1] == "b"
      t += "es"
    elsif key[1] == "#"
      t+= "is"
    end
    
    if (key.size == 3 && key[2] == "m") || (key.size == 2 && key[1] == "m") then
      v = "\\minor"
    else
      v = "\\major"
    end
    
    @output.puts "\\key #{t} #{v}"
    
    last_note_pitch = Tuning.numeric_pitch [:c, octave]
    
    stave.music.each_with_index {|m|
      if m == :bar then
        if stave.config["time"].nil? then
          @output.puts "\\bar \"|\" "
        else
          @output.puts "| "
        end
      elsif m.is_a? Note then
        print_note(m, stave, last_note_pitch)
        last_note_pitch = m.numeric_pitch(stave.tuning)
      elsif m.is_a? Bend then
        m.notes.each_with_index {|n,i|
          print_note(n, stave, last_note_pitch)
          last_note_pitch = n.numeric_pitch(stave.tuning)
          if i == 0 then
            @output.print "( "
          elsif i == m.notes.size - 1 then
            @output.print ") "
          else
            @output.print " "
          end
        }
      else
        raise "Generator Error: Unknown object #{m} in the parsed data."
      end
    }
    
    @output.puts "\n}"
  end
  
  def create_notation_and_tablature(stave)
    @output.puts "\\score {"
    @output.puts "<<"
    create_notation(stave)
    create_tablature(stave)
    @output.puts ">>"
    @output.puts "}"
  end
  
  def create_notation(stave)
    @output.puts "\\new Staff {"
    @output.puts "\\clef #{stave.config["clef"]}"
    @output.puts "\\transpose c c' {"
    @output.puts "\\pitches#{@stave_name}"
    @output.puts "}"
    @output.puts "}"
  end
  
  def create_tablature(stave)
    @output.puts "\\new TabStaff {"
    @output.puts "\\pitches#{@stave_name}"      
    @output.puts "}"
  end
  
end

